list_products_task:
  description: >
    The customer has asked for the list of products available in the store. 
    - For retrieving the product list, call the API with the following details: 
    - Endpoint: `products` 
    - Method: `GET` 
    - Request Body: ''
    - Extract only the product list from the JSON response returned by the API and present it as a JSON object.
    - If the product list is empty, inform the customer that no products are currently available.
  expected_output: >
    A JSON object containing the products list with product id, product name, brand, model and price
  agent: front_end_agent

add_item_to_cart_task:
  description: >
    Analyze the customer's query: {query} to determine if they are requesting to add specific products with a given quantity to the cart.
    - First, check if the requested products exist in the product list by calling the API tool:
    - Endpoint: `products` 
    - Method: `GET` 
    - Request Body: ''
    - If the API response contains the product list, create JSON output keys ProdID, Qty.
    - If multiple products are requested, ensure each product ID is mapped correctly with the requested quantity in a structured JSON format.
    - If a product is not found in the product list, respond to the customer with an appropriate message indicating that the item is unavailable.
    - Add only the available items to the cart.
    - Call the 'Add to Cart' API with the captured product details:
    - Endpoint: `cart` 
    - Method: `POST` 
    - Request Body: JSON containing the product ID and quantity.
  expected_output: >
    A JSON response displaying the items added to the cart, structured as: 
    [{ ProdID: <product_id>, Qty: <quantity> }], 
    along with the API response from the API tool.
  agent: front_end_agent


search_product_task:
  description: >
    An user reached out with a query: {query}
    please search the internet for the product's best price.
    Use the 'Internet Search' tool to search for the product and find the best price.
    pass the query
    Return the three best price found for the product.
  expected_output: >
    A List of three sources with the best price for the product.
  agent: product_search_agent

image_search_task:
  description: >
    do an image search and find what kind of product is in the image
    prompt = Extract the object name from the image. If the object matches any item from the list ['Refrigerator', 'Washing Machine', 'Camera'], use the corresponding name. Otherwise, label the object as 'Others'
    image_path = {path}
    - Use the image search tool with the given prompt and image path. 
    - Extract and format the response from the tool. 
  expected_output: >
    A search result in JSON format with 'ProductName' as key
  agent: image_search_agent

customer_service_task:
  description: >
    A Customer / Manager Agent just reached out with a product-related inquiry: {query} 
    Search through the provided PDF knowledge base to find the most accurate and relevant information.
    Ensure that your response is strictly based on the documents and does not include any generated content.
  expected_output: >
    A precise and fact-based response to the customer's inquiry, strictly sourced from the PDF knowledge base. 
    The response should clearly address the customer's question, referencing the relevant sections of the documents. 
    Ensure the answer is complete, easy to understand, and maintains a professional yet friendly tone.
  agent: customer_service_representative_agent

read_data_task:
  description: >
    Read the data from the json file , parse the json.
    file path = {file_path}.
  expected_output: >
    Data from the json file {file_path} as a dictionary
  agent: read_data_agent

schema_task:
  description: >
    Connect to the given database {database_connection} get the database schema for  {table} and return the schema.
    db_uri = {database_connection}
    table_name = {table}
  expected_output: >
    Database schema
  agent: schema_analyzer

query_generator_task:
  description: >
    Generate a PostgreSQL query based on:
    1. User request -  {user_query}
    2. Target table - {table}
    3. Use columns and values from json data to select the data or insert the data and to update the data
    4. Database schema from schema task
    
    Requirements -
    1. Generate a syntactically correct PostgreSQL query
    2. Include proper table and column names
    3. Don't consider transaction id from the data, ignore transid column for inserting
    4. Add appropriate WHERE clauses if needed
    5. Ensure the query is safe and follows best practices
    
    The query will be executed by the query executor task.
  expected_output: >
    A valid PostgreSQL query string
  agent: query_generator

query_executor_task:
  description: >
    Execute the provided Postgres SQL query following these steps:
    db_uri = {database_connection}
    query = {{query_generator_task.output}}
    1. Review the query received from the query generator
    2. Validate the query structure and safety
    3. Execute the query using the database tool
    4. Format and return the results in a clear, readable format
    
    Context -
    - Generated Query -  {{query_generator_task.output}}
    Important:
    - Ensure the query is properly formatted before execution
    - Handle any potential errors gracefully
    - Return results in a structured format
  expected_output: >
    A dictionary containing:
    1. The executed query
    2. The query results
    3. Any relevant execution metadata
  agent: query_executor
